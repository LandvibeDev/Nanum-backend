# -*- coding: utf-8 -*-
# Generated by Django 1.9.7 on 2016-08-27 13:04
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import study.models


class Migration(migrations.Migration):

    dependencies = [
        ('accounts', '0004_auto_20160709_0430'),
        ('study', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='BasicBoard',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='제목', max_length=200)),
                ('contents', models.TextField(blank=True, help_text='내용', null=True)),
                ('count', models.IntegerField(default=0, help_text='조회수')),
                ('comment_count', models.IntegerField(default=0, help_text='댓글 수')),
                ('create_date', models.DateTimeField(auto_now_add=True, help_text='작성일')),
                ('update_date', models.DateTimeField(auto_now=True, help_text='수정일')),
                ('like_count', models.IntegerField(default=0, help_text='게시글에 대한 좋아요 수')),
            ],
            options={
                'ordering': ('-pk', '-create_date'),
            },
        ),
        migrations.CreateModel(
            name='BasicBoardComment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contents', models.TextField(help_text='내용')),
                ('create_date', models.DateTimeField(auto_now_add=True, help_text='작성일')),
                ('update_date', models.DateTimeField(auto_now=True, help_text='수정일')),
                ('basic_board', models.ForeignKey(blank=True, help_text='게시글', null=True, on_delete=django.db.models.deletion.CASCADE, to='study.BasicBoard')),
                ('user', models.ForeignKey(blank=True, help_text='게시글을 생성한 사용자', null=True, on_delete=django.db.models.deletion.CASCADE, to='accounts.NanumUser')),
            ],
            options={
                'ordering': ('create_date',),
            },
        ),
        migrations.CreateModel(
            name='BasicBoardFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='파일 이름', max_length=200)),
                ('size', models.CharField(help_text='파일 크기(kb) in char type', max_length=200)),
                ('download_count', models.IntegerField(default=0, help_text='다운로드 횟수')),
                ('create_date', models.DateTimeField(auto_now_add=True, help_text='생성일')),
                ('update_date', models.DateTimeField(auto_now=True, help_text='수정일')),
                ('attached_file', models.FileField(blank=True, help_text='게시글 첨부파일', null=True, upload_to=study.models.get_basic_board_file_path)),
                ('basic_board', models.ForeignKey(blank=True, help_text='게시글', null=True, on_delete=django.db.models.deletion.CASCADE, to='study.BasicBoard')),
            ],
            options={
                'ordering': ('-pk', 'create_date'),
            },
        ),
        migrations.CreateModel(
            name='Board',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.IntegerField(default=0, help_text='게시판의 종류 값')),
                ('title', models.CharField(default='이름 없음', help_text='게시판 이름', max_length=200)),
                ('nickname', models.CharField(blank=True, default='닉네임', help_text='게시판 별명', max_length=200, null=True)),
                ('description', models.CharField(blank=True, default=' ', help_text='간단한 설명', max_length=200, null=True)),
            ],
            options={
                'ordering': ('-pk',),
            },
        ),
        migrations.CreateModel(
            name='Calendar',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default='제목없는 일정', help_text='일정 제목', max_length=200)),
                ('start_date', models.DateTimeField(help_text='일정 시작일')),
                ('end_date', models.DateTimeField(help_text='일정 종료일')),
                ('description', models.TextField(blank=True, help_text='일정 설명', null=True)),
                ('is_oneday', models.BooleanField(default=False, help_text='종일 일정 여부')),
                ('color', models.CharField(blank=True, default='#FFFFFF', help_text='일정 색상', max_length=200, null=True)),
                ('linked_type', models.IntegerField(default=-1, help_text='일정과 관련된 글의 종류(과제, 자료 등)')),
                ('board', models.ForeignKey(blank=True, help_text='일정과 관련된 게시판', null=True, on_delete=django.db.models.deletion.CASCADE, to='study.Board')),
            ],
            options={
                'ordering': ('-pk', '-start_date'),
            },
        ),
        migrations.CreateModel(
            name='CalendarTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='일정 분류', max_length=50)),
                ('calendar', models.ManyToManyField(blank=True, help_text='일정 정보', related_name='calendar_tag_set', to='study.Calendar')),
            ],
            options={
                'ordering': ('-pk', 'name'),
            },
        ),
        migrations.CreateModel(
            name='StudyLike',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_date', models.DateTimeField(auto_now_add=True, help_text='좋아요 누른 날짜')),
            ],
            options={
                'ordering': ('-pk', '-create_date'),
            },
        ),
        migrations.CreateModel(
            name='StudyMember',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('joined_date', models.DateTimeField(auto_now_add=True, help_text='스터디 참가일')),
            ],
            options={
                'ordering': ('-pk', '-joined_date'),
            },
        ),
        migrations.CreateModel(
            name='Verification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(blank=True, default=' ', help_text='간단한 설명', max_length=200, null=True)),
                ('start_date', models.DateTimeField(blank=True, help_text='시작일', null=True)),
                ('end_date', models.DateTimeField(blank=True, help_text='종료일', null=True)),
                ('board', models.ForeignKey(blank=True, help_text='게시판 정보', null=True, on_delete=django.db.models.deletion.CASCADE, to='study.Board')),
                ('user', models.ForeignKey(blank=True, help_text='인증 토픽을 생성한 사용자', null=True, on_delete=django.db.models.deletion.CASCADE, to='accounts.NanumUser')),
            ],
            options={
                'ordering': ('-pk', 'start_date'),
            },
        ),
        migrations.CreateModel(
            name='VerificationFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attached_image', models.ImageField(blank=True, help_text='인증 첨부파일', null=True, upload_to=study.models.get_verification_file_path)),
                ('is_checked', models.BooleanField(default='False', help_text='인증여부')),
                ('upload_date', models.DateTimeField(auto_now_add=True, help_text='인증 업로드 날짜')),
                ('checked_date', models.DateTimeField(auto_now=True, help_text='인증 확인 날짜')),
                ('rank', models.IntegerField(default='0', help_text='인증 순위(스터디장이 결정)')),
                ('user', models.ForeignKey(blank=True, help_text='인증 완료한 사용자', null=True, on_delete=django.db.models.deletion.CASCADE, to='accounts.NanumUser')),
                ('verification', models.ForeignKey(blank=True, help_text='인증 정보', null=True, on_delete=django.db.models.deletion.CASCADE, to='study.Verification')),
            ],
            options={
                'ordering': ('-pk', 'upload_date'),
            },
        ),
        migrations.RemoveField(
            model_name='calender',
            name='study',
        ),
        migrations.RemoveField(
            model_name='calendercategory',
            name='calender',
        ),
        migrations.RemoveField(
            model_name='like',
            name='study',
        ),
        migrations.RemoveField(
            model_name='like',
            name='user',
        ),
        migrations.RemoveField(
            model_name='member',
            name='study',
        ),
        migrations.RemoveField(
            model_name='member',
            name='user',
        ),
        migrations.RemoveField(
            model_name='notice',
            name='study',
        ),
        migrations.RemoveField(
            model_name='notice',
            name='user',
        ),
        migrations.RemoveField(
            model_name='question',
            name='study',
        ),
        migrations.RemoveField(
            model_name='question',
            name='user',
        ),
        migrations.RemoveField(
            model_name='questioncomment',
            name='question',
        ),
        migrations.RemoveField(
            model_name='questioncomment',
            name='user',
        ),
        migrations.RemoveField(
            model_name='questionfile',
            name='question',
        ),
        migrations.RemoveField(
            model_name='referencecomment',
            name='reference',
        ),
        migrations.RemoveField(
            model_name='referencecomment',
            name='user',
        ),
        migrations.AlterModelOptions(
            name='reference',
            options={'ordering': ('-pk', '-create_date')},
        ),
        migrations.AlterModelOptions(
            name='referencefile',
            options={'ordering': ('-pk', 'create_date')},
        ),
        migrations.AlterModelOptions(
            name='study',
            options={'ordering': ('-pk', '-start_date')},
        ),
        migrations.RemoveField(
            model_name='reference',
            name='calender',
        ),
        migrations.RemoveField(
            model_name='reference',
            name='study',
        ),
        migrations.AlterField(
            model_name='reference',
            name='user',
            field=models.ForeignKey(blank=True, help_text='참고자료를 업로드한 사용자', null=True, on_delete=django.db.models.deletion.CASCADE, to='accounts.NanumUser'),
        ),
        migrations.AlterField(
            model_name='referencefile',
            name='attached_file',
            field=models.FileField(blank=True, help_text='첨부한 참고자료', null=True, upload_to=study.models.get_reference_file_path),
        ),
        migrations.AlterField(
            model_name='referencefile',
            name='reference',
            field=models.ForeignKey(blank=True, help_text='참고자료에 대한 정보', null=True, on_delete=django.db.models.deletion.CASCADE, to='study.Reference'),
        ),
        migrations.AlterField(
            model_name='study',
            name='end_date',
            field=models.DateTimeField(blank=True, help_text='종료일', null=True),
        ),
        migrations.AlterField(
            model_name='study',
            name='is_active',
            field=models.BooleanField(default=True, help_text='스터디 진행여부(진행중/끝)'),
        ),
        migrations.AlterField(
            model_name='study',
            name='is_enrolling',
            field=models.BooleanField(default=True, help_text='스터디 모집중(참여가능/불가)'),
        ),
        migrations.AlterField(
            model_name='study',
            name='max_user_count',
            field=models.IntegerField(default=10, help_text='최대 스터디 인원'),
        ),
        migrations.AlterField(
            model_name='study',
            name='start_date',
            field=models.DateTimeField(blank=True, help_text='시작일', null=True),
        ),
        migrations.AlterField(
            model_name='study',
            name='thumbnail',
            field=models.ImageField(blank=True, help_text='썸네일 이미지', null=True, upload_to=study.models.get_study_thumbnail_path),
        ),
        migrations.DeleteModel(
            name='Calender',
        ),
        migrations.DeleteModel(
            name='CalenderCategory',
        ),
        migrations.DeleteModel(
            name='Like',
        ),
        migrations.DeleteModel(
            name='Member',
        ),
        migrations.DeleteModel(
            name='Notice',
        ),
        migrations.DeleteModel(
            name='Question',
        ),
        migrations.DeleteModel(
            name='QuestionComment',
        ),
        migrations.DeleteModel(
            name='QuestionFile',
        ),
        migrations.DeleteModel(
            name='ReferenceComment',
        ),
        migrations.AddField(
            model_name='studymember',
            name='study',
            field=models.ForeignKey(blank=True, help_text='스터디 정보', null=True, on_delete=django.db.models.deletion.CASCADE, to='study.Study'),
        ),
        migrations.AddField(
            model_name='studymember',
            name='user',
            field=models.ForeignKey(blank=True, help_text='스터디에 참가한 사용자', null=True, on_delete=django.db.models.deletion.CASCADE, to='accounts.NanumUser'),
        ),
        migrations.AddField(
            model_name='studylike',
            name='study',
            field=models.ForeignKey(blank=True, help_text='스터디 정보', null=True, on_delete=django.db.models.deletion.CASCADE, to='study.Study'),
        ),
        migrations.AddField(
            model_name='studylike',
            name='user',
            field=models.ForeignKey(blank=True, help_text='좋아요를 생성한 사용자', null=True, on_delete=django.db.models.deletion.CASCADE, to='accounts.NanumUser'),
        ),
        migrations.AddField(
            model_name='calendar',
            name='study',
            field=models.ForeignKey(blank=True, help_text='스터디', null=True, on_delete=django.db.models.deletion.CASCADE, to='study.Study'),
        ),
        migrations.AddField(
            model_name='calendar',
            name='user',
            field=models.ForeignKey(blank=True, help_text='일정을 생성한 사용자', null=True, on_delete=django.db.models.deletion.CASCADE, to='accounts.NanumUser'),
        ),
        migrations.AddField(
            model_name='board',
            name='study',
            field=models.ForeignKey(blank=True, help_text='스터디 정보', null=True, on_delete=django.db.models.deletion.CASCADE, to='study.Study'),
        ),
        migrations.AddField(
            model_name='basicboard',
            name='board',
            field=models.ForeignKey(blank=True, help_text='게시판 정보', null=True, on_delete=django.db.models.deletion.CASCADE, to='study.Board'),
        ),
        migrations.AddField(
            model_name='basicboard',
            name='user',
            field=models.ForeignKey(blank=True, help_text='게시글을 생성한 사용자', null=True, on_delete=django.db.models.deletion.CASCADE, to='accounts.NanumUser'),
        ),
        migrations.AddField(
            model_name='reference',
            name='board',
            field=models.ForeignKey(blank=True, help_text='참고자료와 관련된 게시판', null=True, on_delete=django.db.models.deletion.CASCADE, to='study.Board'),
        ),
        migrations.AddField(
            model_name='study',
            name='likes',
            field=models.ManyToManyField(blank=True, related_name='likes', through='study.StudyLike', to='accounts.NanumUser'),
        ),
        migrations.AddField(
            model_name='study',
            name='members',
            field=models.ManyToManyField(blank=True, related_name='members', through='study.StudyMember', to='accounts.NanumUser'),
        ),
    ]

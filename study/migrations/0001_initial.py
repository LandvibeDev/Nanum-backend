# -*- coding: utf-8 -*-
# Generated by Django 1.9.7 on 2016-07-27 13:11
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0004_auto_20160709_0430'),
    ]

    operations = [
        migrations.CreateModel(
            name='Calender',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateTimeField(help_text='일정 시작일')),
                ('end_date', models.DateTimeField(help_text='일정 종료일')),
                ('description', models.TextField(blank=True, default=' ', help_text='일정 설명')),
                ('is_oneday', models.BooleanField(help_text='종일 일정 여부')),
                ('is_part_time', models.BooleanField(help_text='부분 일정 여부')),
            ],
        ),
        migrations.CreateModel(
            name='CalenderCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='일정 분류', max_length=30)),
                ('calender', models.ForeignKey(help_text='일정 정보', on_delete=django.db.models.deletion.CASCADE, to='study.Calender')),
            ],
        ),
        migrations.CreateModel(
            name='Like',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_data', models.DateTimeField(auto_now_add=True, help_text='좋아요 누른 날짜')),
            ],
        ),
        migrations.CreateModel(
            name='Member',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.IntegerField(default=1, help_text='스터디 권한, 숫자가 낮을수록 높은권한?')),
                ('joined_data', models.DateTimeField(auto_now_add=True, help_text='스터디 참가일')),
            ],
        ),
        migrations.CreateModel(
            name='Notice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='제목', max_length=200)),
                ('contents', models.TextField(blank=True, help_text='내용', null=True)),
                ('count', models.IntegerField(default=0, help_text='조회수')),
                ('comment_count', models.IntegerField(default=0, help_text='댓글 수')),
                ('create_date', models.DateTimeField(auto_now_add=True, help_text='작성일')),
                ('update_date', models.DateTimeField(auto_now=True, help_text='수정일')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='제목', max_length=200)),
                ('contents', models.TextField(blank=True, help_text='내용', null=True)),
                ('count', models.IntegerField(default=0, help_text='조회수')),
                ('comment_count', models.IntegerField(default=0, help_text='댓글 수')),
                ('create_date', models.DateTimeField(auto_now_add=True, help_text='작성일')),
                ('update_date', models.DateTimeField(auto_now=True, help_text='수정일')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='QuestionComment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contents', models.TextField(help_text='내용')),
                ('create_date', models.DateTimeField(auto_now_add=True, help_text='작성일')),
                ('update_date', models.DateTimeField(auto_now=True, help_text='수정일')),
                ('question', models.ForeignKey(help_text='댓글에 대한 상위 질문', on_delete=django.db.models.deletion.CASCADE, to='study.Question')),
                ('user', models.ForeignKey(help_text='질문글에 대한 댓글을 생성한 사용자', on_delete=django.db.models.deletion.CASCADE, to='accounts.NanumUser')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='QuestionFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='파일 이름', max_length=200)),
                ('size', models.CharField(help_text='파일 크기(kb) in char type', max_length=200)),
                ('download_count', models.IntegerField(default=0, help_text='다운로드 횟수')),
                ('create_date', models.DateTimeField(auto_now_add=True, help_text='생성일')),
                ('update_date', models.DateTimeField(auto_now=True, help_text='수정일')),
                ('attached_file', models.FileField(help_text='질문글에 대한 첨부파일', upload_to='')),
                ('question', models.ForeignKey(help_text='첨부파일이 포함된 질문글', on_delete=django.db.models.deletion.CASCADE, to='study.Question')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Reference',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='제목', max_length=200)),
                ('contents', models.TextField(blank=True, help_text='내용', null=True)),
                ('count', models.IntegerField(default=0, help_text='조회수')),
                ('comment_count', models.IntegerField(default=0, help_text='댓글 수')),
                ('create_date', models.DateTimeField(auto_now_add=True, help_text='작성일')),
                ('update_date', models.DateTimeField(auto_now=True, help_text='수정일')),
                ('calender', models.ForeignKey(help_text='참고자료와 관련된 일정', on_delete=django.db.models.deletion.CASCADE, to='study.Calender')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ReferenceComment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contents', models.TextField(help_text='내용')),
                ('create_date', models.DateTimeField(auto_now_add=True, help_text='작성일')),
                ('update_date', models.DateTimeField(auto_now=True, help_text='수정일')),
                ('reference', models.ForeignKey(help_text='참고자료', on_delete=django.db.models.deletion.CASCADE, to='study.Reference')),
                ('user', models.ForeignKey(help_text='참고자료에 대한 댓글', on_delete=django.db.models.deletion.CASCADE, to='accounts.NanumUser')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ReferenceFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='파일 이름', max_length=200)),
                ('size', models.CharField(help_text='파일 크기(kb) in char type', max_length=200)),
                ('download_count', models.IntegerField(default=0, help_text='다운로드 횟수')),
                ('create_date', models.DateTimeField(auto_now_add=True, help_text='생성일')),
                ('update_date', models.DateTimeField(auto_now=True, help_text='수정일')),
                ('attached_file', models.FileField(help_text='첨부한 참고자료', upload_to='')),
                ('reference', models.ForeignKey(help_text='참고자료에 대한 정보', on_delete=django.db.models.deletion.CASCADE, to='study.Reference')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Study',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='이름', max_length=200)),
                ('topic', models.CharField(help_text='주제', max_length=200)),
                ('thumbnail', models.ImageField(help_text='썸네일 이미지', upload_to='')),
                ('start_date', models.DateTimeField(help_text='시작일')),
                ('end_date', models.DateTimeField(help_text='종료일')),
                ('joined_user_count', models.IntegerField(default=0, help_text='스터디 인원')),
                ('max_user_count', models.IntegerField(default=0, help_text='최대 스터디 인원')),
                ('like_count', models.IntegerField(default=0, help_text='좋아요 수')),
                ('is_active', models.BooleanField(help_text='스터디 진행여부(진행중/끝)')),
                ('is_enrolling', models.BooleanField(help_text='스터디 모집중(참여가능/불가)')),
            ],
        ),
        migrations.AddField(
            model_name='reference',
            name='study',
            field=models.ForeignKey(help_text='참고자료와 관련된 스터디', on_delete=django.db.models.deletion.CASCADE, to='study.Study'),
        ),
        migrations.AddField(
            model_name='reference',
            name='user',
            field=models.ForeignKey(help_text='참고자료를 업로드한 사용자', on_delete=django.db.models.deletion.CASCADE, to='accounts.NanumUser'),
        ),
        migrations.AddField(
            model_name='question',
            name='study',
            field=models.ForeignKey(help_text='질문글이 포함된 스터디', on_delete=django.db.models.deletion.CASCADE, to='study.Study'),
        ),
        migrations.AddField(
            model_name='question',
            name='user',
            field=models.ForeignKey(help_text='질문글을 생성한 사용자', on_delete=django.db.models.deletion.CASCADE, to='accounts.NanumUser'),
        ),
        migrations.AddField(
            model_name='notice',
            name='study',
            field=models.ForeignKey(help_text='스터디', on_delete=django.db.models.deletion.CASCADE, to='study.Study'),
        ),
        migrations.AddField(
            model_name='notice',
            name='user',
            field=models.ForeignKey(help_text='작성자', on_delete=django.db.models.deletion.CASCADE, to='accounts.NanumUser'),
        ),
        migrations.AddField(
            model_name='member',
            name='study',
            field=models.ForeignKey(help_text='스터디 정보', on_delete=django.db.models.deletion.CASCADE, to='study.Study'),
        ),
        migrations.AddField(
            model_name='member',
            name='user',
            field=models.ForeignKey(help_text='스터디에 참가한 사용자', on_delete=django.db.models.deletion.CASCADE, to='accounts.NanumUser'),
        ),
        migrations.AddField(
            model_name='like',
            name='study',
            field=models.ForeignKey(help_text='스터디 정보', on_delete=django.db.models.deletion.CASCADE, to='study.Study'),
        ),
        migrations.AddField(
            model_name='like',
            name='user',
            field=models.ForeignKey(help_text='좋아요를 생성한 사용자', on_delete=django.db.models.deletion.CASCADE, to='accounts.NanumUser'),
        ),
        migrations.AddField(
            model_name='calender',
            name='study',
            field=models.ForeignKey(help_text='스터디', on_delete=django.db.models.deletion.CASCADE, to='study.Study'),
        ),
    ]

# -*- coding: utf-8 -*-
# Generated by Django 1.9.7 on 2016-06-17 11:30
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import issue.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Issue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=200)),
                ('contents', models.TextField(blank=True)),
                ('count', models.IntegerField(default=0)),
                ('comment_count', models.IntegerField(default=0)),
                ('create_date', models.DateTimeField(auto_now_add=True)),
                ('update_date', models.DateTimeField(auto_now=True)),
                ('like_count', models.IntegerField(default=0)),
                ('thumbnail', models.ImageField(upload_to=issue.models.get_issue_thumbnail_path)),
            ],
            options={
                'db_table': 'issue',
            },
        ),
        migrations.CreateModel(
            name='IssueComment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contents', models.TextField(blank=True)),
                ('create_date', models.DateTimeField(auto_now_add=True)),
                ('update_date', models.DateTimeField(auto_now=True)),
                ('issue', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='issue.Issue')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='issue_comment_users', to='accounts.NanumUser')),
            ],
            options={
                'db_table': 'issue_comment',
            },
        ),
        migrations.CreateModel(
            name='IssueFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('unique_name', models.CharField(help_text='prevent to duplicate file name, make of upload_date_time + name', max_length=200, unique=True)),
                ('size', models.CharField(help_text='file size in char type (kb)', max_length=200)),
                ('download_count', models.IntegerField()),
                ('create_date', models.DateTimeField(auto_now_add=True)),
                ('update_date', models.DateTimeField(auto_now=True)),
                ('attached_file', models.FileField(upload_to=issue.models.get_issue_file_path)),
                ('issue', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='issue.Issue')),
            ],
            options={
                'db_table': 'issue_file',
            },
        ),
        migrations.CreateModel(
            name='IssueLike',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_date', models.DateTimeField(auto_now_add=True)),
                ('issue', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='issue.Issue')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.NanumUser')),
            ],
            options={
                'db_table': 'issue_like',
            },
        ),
        migrations.CreateModel(
            name='IssueTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
            ],
            options={
                'db_table': 'issue_tag',
            },
        ),
        migrations.AddField(
            model_name='issue',
            name='likes',
            field=models.ManyToManyField(related_name='issue_likes', through='issue.IssueLike', to='accounts.NanumUser'),
        ),
        migrations.AddField(
            model_name='issue',
            name='tags',
            field=models.ManyToManyField(null=True, to='issue.IssueTag'),
        ),
        migrations.AddField(
            model_name='issue',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='issue_users', to='accounts.NanumUser'),
        ),
    ]
